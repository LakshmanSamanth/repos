//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SRSGYMProj
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GYMONEDBMVCEntities : DbContext
    {
        public GYMONEDBMVCEntities()
            : base("name=GYMONEDBMVCEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Fiscalyear> Fiscalyears { get; set; }
        public virtual DbSet<MemberRegistration> MemberRegistrations { get; set; }
        public virtual DbSet<PaymentDetail> PaymentDetails { get; set; }
        public virtual DbSet<PlanMaster> PlanMasters { get; set; }
        public virtual DbSet<ReceiptDetail> ReceiptDetails { get; set; }
        public virtual DbSet<SchemeMaster> SchemeMasters { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<webpages_Membership> webpages_Membership { get; set; }
        public virtual DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public virtual DbSet<webpages_Roles> webpages_Roles { get; set; }
    
        public virtual int sprocMemberRegistrationDeleteSingleItem(Nullable<long> memID)
        {
            var memIDParameter = memID.HasValue ?
                new ObjectParameter("MemID", memID) :
                new ObjectParameter("MemID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sprocMemberRegistrationDeleteSingleItem", memIDParameter);
        }
    
        public virtual int sprocMemberRegistrationInsertUpdateSingleItem(Nullable<long> memID, string memberFName, string memberLName, string memberMName, string address, Nullable<System.DateTime> dOB, string age, string contactno, string emailID, string gender, Nullable<int> plantypeID, Nullable<int> workouttypeID, Nullable<long> createdby, Nullable<long> modifiedBy, Nullable<System.DateTime> joiningDate, ObjectParameter memIDOUT)
        {
            var memIDParameter = memID.HasValue ?
                new ObjectParameter("MemID", memID) :
                new ObjectParameter("MemID", typeof(long));
    
            var memberFNameParameter = memberFName != null ?
                new ObjectParameter("MemberFName", memberFName) :
                new ObjectParameter("MemberFName", typeof(string));
    
            var memberLNameParameter = memberLName != null ?
                new ObjectParameter("MemberLName", memberLName) :
                new ObjectParameter("MemberLName", typeof(string));
    
            var memberMNameParameter = memberMName != null ?
                new ObjectParameter("MemberMName", memberMName) :
                new ObjectParameter("MemberMName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var ageParameter = age != null ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(string));
    
            var contactnoParameter = contactno != null ?
                new ObjectParameter("Contactno", contactno) :
                new ObjectParameter("Contactno", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var plantypeIDParameter = plantypeID.HasValue ?
                new ObjectParameter("PlantypeID", plantypeID) :
                new ObjectParameter("PlantypeID", typeof(int));
    
            var workouttypeIDParameter = workouttypeID.HasValue ?
                new ObjectParameter("WorkouttypeID", workouttypeID) :
                new ObjectParameter("WorkouttypeID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(long));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("JoiningDate", joiningDate) :
                new ObjectParameter("JoiningDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sprocMemberRegistrationInsertUpdateSingleItem", memIDParameter, memberFNameParameter, memberLNameParameter, memberMNameParameter, addressParameter, dOBParameter, ageParameter, contactnoParameter, emailIDParameter, genderParameter, plantypeIDParameter, workouttypeIDParameter, createdbyParameter, modifiedByParameter, joiningDateParameter, memIDOUT);
        }
    
        public virtual ObjectResult<sprocMemberRegistrationSelectList_Result> sprocMemberRegistrationSelectList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sprocMemberRegistrationSelectList_Result>("sprocMemberRegistrationSelectList");
        }
    
        public virtual ObjectResult<sprocMemberRegistrationSelectSingleItem_Result> sprocMemberRegistrationSelectSingleItem(Nullable<long> memID)
        {
            var memIDParameter = memID.HasValue ?
                new ObjectParameter("MemID", memID) :
                new ObjectParameter("MemID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sprocMemberRegistrationSelectSingleItem_Result>("sprocMemberRegistrationSelectSingleItem", memIDParameter);
        }
    
        public virtual int sprocMemberRegistrationUpdateSingleItem(Nullable<long> paymentID, Nullable<int> planID, Nullable<int> workouttypeID, string paymenttype, Nullable<System.DateTime> paymentFromdt, Nullable<decimal> paymentAmount, Nullable<int> modifyUserID, string recStatus, Nullable<long> memberID, ObjectParameter paymentIDOUT)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(long));
    
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("PlanID", planID) :
                new ObjectParameter("PlanID", typeof(int));
    
            var workouttypeIDParameter = workouttypeID.HasValue ?
                new ObjectParameter("WorkouttypeID", workouttypeID) :
                new ObjectParameter("WorkouttypeID", typeof(int));
    
            var paymenttypeParameter = paymenttype != null ?
                new ObjectParameter("Paymenttype", paymenttype) :
                new ObjectParameter("Paymenttype", typeof(string));
    
            var paymentFromdtParameter = paymentFromdt.HasValue ?
                new ObjectParameter("PaymentFromdt", paymentFromdt) :
                new ObjectParameter("PaymentFromdt", typeof(System.DateTime));
    
            var paymentAmountParameter = paymentAmount.HasValue ?
                new ObjectParameter("PaymentAmount", paymentAmount) :
                new ObjectParameter("PaymentAmount", typeof(decimal));
    
            var modifyUserIDParameter = modifyUserID.HasValue ?
                new ObjectParameter("ModifyUserID", modifyUserID) :
                new ObjectParameter("ModifyUserID", typeof(int));
    
            var recStatusParameter = recStatus != null ?
                new ObjectParameter("RecStatus", recStatus) :
                new ObjectParameter("RecStatus", typeof(string));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sprocMemberRegistrationUpdateSingleItem", paymentIDParameter, planIDParameter, workouttypeIDParameter, paymenttypeParameter, paymentFromdtParameter, paymentAmountParameter, modifyUserIDParameter, recStatusParameter, memberIDParameter, paymentIDOUT);
        }
    
        public virtual int sprocPaymentDetailsDeleteSingleItem(Nullable<long> paymentID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sprocPaymentDetailsDeleteSingleItem", paymentIDParameter);
        }
    
        public virtual int sprocPaymentDetailsInsertUpdateSingleItem(Nullable<long> paymentID, Nullable<int> planID, Nullable<int> workouttypeID, string paymenttype, Nullable<System.DateTime> paymentFromdt, Nullable<decimal> paymentAmount, Nullable<int> createUserID, Nullable<int> modifyUserID, string recStatus, Nullable<long> memberID, ObjectParameter paymentIDOUT)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(long));
    
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("PlanID", planID) :
                new ObjectParameter("PlanID", typeof(int));
    
            var workouttypeIDParameter = workouttypeID.HasValue ?
                new ObjectParameter("WorkouttypeID", workouttypeID) :
                new ObjectParameter("WorkouttypeID", typeof(int));
    
            var paymenttypeParameter = paymenttype != null ?
                new ObjectParameter("Paymenttype", paymenttype) :
                new ObjectParameter("Paymenttype", typeof(string));
    
            var paymentFromdtParameter = paymentFromdt.HasValue ?
                new ObjectParameter("PaymentFromdt", paymentFromdt) :
                new ObjectParameter("PaymentFromdt", typeof(System.DateTime));
    
            var paymentAmountParameter = paymentAmount.HasValue ?
                new ObjectParameter("PaymentAmount", paymentAmount) :
                new ObjectParameter("PaymentAmount", typeof(decimal));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var modifyUserIDParameter = modifyUserID.HasValue ?
                new ObjectParameter("ModifyUserID", modifyUserID) :
                new ObjectParameter("ModifyUserID", typeof(int));
    
            var recStatusParameter = recStatus != null ?
                new ObjectParameter("RecStatus", recStatus) :
                new ObjectParameter("RecStatus", typeof(string));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sprocPaymentDetailsInsertUpdateSingleItem", paymentIDParameter, planIDParameter, workouttypeIDParameter, paymenttypeParameter, paymentFromdtParameter, paymentAmountParameter, createUserIDParameter, modifyUserIDParameter, recStatusParameter, memberIDParameter, paymentIDOUT);
        }
    
        public virtual ObjectResult<sprocPaymentDetailsSelectList_Result> sprocPaymentDetailsSelectList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sprocPaymentDetailsSelectList_Result>("sprocPaymentDetailsSelectList");
        }
    
        public virtual ObjectResult<sprocPaymentDetailsSelectSingleItem_Result> sprocPaymentDetailsSelectSingleItem(Nullable<long> paymentID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sprocPaymentDetailsSelectSingleItem_Result>("sprocPaymentDetailsSelectSingleItem", paymentIDParameter);
        }
    
        public virtual int sprocPlanMasterDeleteSingleItem(Nullable<int> planID)
        {
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("PlanID", planID) :
                new ObjectParameter("PlanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sprocPlanMasterDeleteSingleItem", planIDParameter);
        }
    
        public virtual int sprocPlanMasterInsertUpdateSingleItem(Nullable<int> planID, Nullable<int> schemeID, Nullable<int> periodID, string planName, Nullable<decimal> planAmount, Nullable<decimal> serviceTax, Nullable<System.DateTime> createDate, Nullable<int> createUserID, Nullable<System.DateTime> modifyDate, Nullable<int> modifyUserID, string recStatus)
        {
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("PlanID", planID) :
                new ObjectParameter("PlanID", typeof(int));
    
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(int));
    
            var planNameParameter = planName != null ?
                new ObjectParameter("PlanName", planName) :
                new ObjectParameter("PlanName", typeof(string));
    
            var planAmountParameter = planAmount.HasValue ?
                new ObjectParameter("PlanAmount", planAmount) :
                new ObjectParameter("PlanAmount", typeof(decimal));
    
            var serviceTaxParameter = serviceTax.HasValue ?
                new ObjectParameter("ServiceTax", serviceTax) :
                new ObjectParameter("ServiceTax", typeof(decimal));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var modifyUserIDParameter = modifyUserID.HasValue ?
                new ObjectParameter("ModifyUserID", modifyUserID) :
                new ObjectParameter("ModifyUserID", typeof(int));
    
            var recStatusParameter = recStatus != null ?
                new ObjectParameter("RecStatus", recStatus) :
                new ObjectParameter("RecStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sprocPlanMasterInsertUpdateSingleItem", planIDParameter, schemeIDParameter, periodIDParameter, planNameParameter, planAmountParameter, serviceTaxParameter, createDateParameter, createUserIDParameter, modifyDateParameter, modifyUserIDParameter, recStatusParameter);
        }
    
        public virtual ObjectResult<sprocPlanMasterSelectList_Result> sprocPlanMasterSelectList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sprocPlanMasterSelectList_Result>("sprocPlanMasterSelectList");
        }
    
        public virtual ObjectResult<sprocPlanMasterSelectSingleItem_Result> sprocPlanMasterSelectSingleItem(Nullable<int> planID)
        {
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("PlanID", planID) :
                new ObjectParameter("PlanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sprocPlanMasterSelectSingleItem_Result>("sprocPlanMasterSelectSingleItem", planIDParameter);
        }
    
        public virtual int sprocRecepitTBInsertUpdateSingleItem(Nullable<long> recepitID, Nullable<long> memberid, Nullable<long> generateby, Nullable<long> createdby)
        {
            var recepitIDParameter = recepitID.HasValue ?
                new ObjectParameter("RecepitID", recepitID) :
                new ObjectParameter("RecepitID", typeof(long));
    
            var memberidParameter = memberid.HasValue ?
                new ObjectParameter("Memberid", memberid) :
                new ObjectParameter("Memberid", typeof(long));
    
            var generatebyParameter = generateby.HasValue ?
                new ObjectParameter("generateby", generateby) :
                new ObjectParameter("generateby", typeof(long));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sprocRecepitTBInsertUpdateSingleItem", recepitIDParameter, memberidParameter, generatebyParameter, createdbyParameter);
        }
    
        public virtual int sprocSchemeMasterDeleteSingleItem(Nullable<int> schemeID)
        {
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sprocSchemeMasterDeleteSingleItem", schemeIDParameter);
        }
    
        public virtual int sprocSchemeMasterInsertUpdateSingleItem(Nullable<int> schemeID, string schemeName, Nullable<int> createdby)
        {
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            var schemeNameParameter = schemeName != null ?
                new ObjectParameter("SchemeName", schemeName) :
                new ObjectParameter("SchemeName", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sprocSchemeMasterInsertUpdateSingleItem", schemeIDParameter, schemeNameParameter, createdbyParameter);
        }
    
        public virtual ObjectResult<Usp_ALLPaymentDetailinfo_Result> Usp_ALLPaymentDetailinfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_ALLPaymentDetailinfo_Result>("Usp_ALLPaymentDetailinfo");
        }
    
        public virtual ObjectResult<string> Usp_checkplan(string planmaster)
        {
            var planmasterParameter = planmaster != null ?
                new ObjectParameter("Planmaster", planmaster) :
                new ObjectParameter("Planmaster", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Usp_checkplan", planmasterParameter);
        }
    
        public virtual ObjectResult<string> Usp_checkscheme(string schemeName)
        {
            var schemeNameParameter = schemeName != null ?
                new ObjectParameter("SchemeName", schemeName) :
                new ObjectParameter("SchemeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Usp_checkscheme", schemeNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Usp_checkUsernameExits(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Usp_checkUsernameExits", userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Usp_CheckUserRoles(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Usp_CheckUserRoles", userIdParameter);
        }
    
        public virtual ObjectResult<Usp_DisplayAllUser_And_Roles_Result> Usp_DisplayAllUser_And_Roles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_DisplayAllUser_And_Roles_Result>("Usp_DisplayAllUser_And_Roles");
        }
    
        public virtual ObjectResult<Usp_Generatenumber_Result> Usp_Generatenumber()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_Generatenumber_Result>("Usp_Generatenumber");
        }
    
        public virtual ObjectResult<Usp_GenerateRecepit_Result> Usp_GenerateRecepit(Nullable<long> memberid)
        {
            var memberidParameter = memberid.HasValue ?
                new ObjectParameter("Memberid", memberid) :
                new ObjectParameter("Memberid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GenerateRecepit_Result>("Usp_GenerateRecepit", memberidParameter);
        }
    
        public virtual ObjectResult<Usp_GetAllRenwalrecords_Result> Usp_GetAllRenwalrecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllRenwalrecords_Result>("Usp_GetAllRenwalrecords");
        }
    
        public virtual ObjectResult<Usp_GetAllRenwalrecordsFromBetweenDate_Result> Usp_GetAllRenwalrecordsFromBetweenDate(Nullable<System.DateTime> paymentfromdt, Nullable<System.DateTime> paymenttodt, Nullable<System.DateTime> exactdate)
        {
            var paymentfromdtParameter = paymentfromdt.HasValue ?
                new ObjectParameter("Paymentfromdt", paymentfromdt) :
                new ObjectParameter("Paymentfromdt", typeof(System.DateTime));
    
            var paymenttodtParameter = paymenttodt.HasValue ?
                new ObjectParameter("Paymenttodt", paymenttodt) :
                new ObjectParameter("Paymenttodt", typeof(System.DateTime));
    
            var exactdateParameter = exactdate.HasValue ?
                new ObjectParameter("exactdate", exactdate) :
                new ObjectParameter("exactdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllRenwalrecordsFromBetweenDate_Result>("Usp_GetAllRenwalrecordsFromBetweenDate", paymentfromdtParameter, paymenttodtParameter, exactdateParameter);
        }
    
        public virtual ObjectResult<Usp_GetAllUsers_Result> Usp_GetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllUsers_Result>("Usp_GetAllUsers");
        }
    
        public virtual ObjectResult<Nullable<decimal>> Usp_GetAmount_reg(Nullable<int> planID, Nullable<int> schemeID)
        {
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("PlanID", planID) :
                new ObjectParameter("PlanID", typeof(int));
    
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Usp_GetAmount_reg", planIDParameter, schemeIDParameter);
        }
    
        public virtual ObjectResult<Usp_GetDataofMemberbyID_Result> Usp_GetDataofMemberbyID(Nullable<long> mainMemberID)
        {
            var mainMemberIDParameter = mainMemberID.HasValue ?
                new ObjectParameter("MainMemberID", mainMemberID) :
                new ObjectParameter("MainMemberID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetDataofMemberbyID_Result>("Usp_GetDataofMemberbyID", mainMemberIDParameter);
        }
    
        public virtual ObjectResult<Usp_getDec_Result> Usp_getDec(Nullable<long> memberid)
        {
            var memberidParameter = memberid.HasValue ?
                new ObjectParameter("Memberid", memberid) :
                new ObjectParameter("Memberid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_getDec_Result>("Usp_getDec", memberidParameter);
        }
    
        public virtual ObjectResult<Usp_GetMonthwisepaymentdetails_Result> Usp_GetMonthwisepaymentdetails(Nullable<long> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetMonthwisepaymentdetails_Result>("Usp_GetMonthwisepaymentdetails", monthParameter);
        }
    
        public virtual ObjectResult<Usp_GetPlanByWorkTypeID_Result> Usp_GetPlanByWorkTypeID(Nullable<int> schemeID)
        {
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetPlanByWorkTypeID_Result>("Usp_GetPlanByWorkTypeID", schemeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Usp_getPlanPeriodID(Nullable<int> planID)
        {
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("PlanID", planID) :
                new ObjectParameter("PlanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Usp_getPlanPeriodID", planIDParameter);
        }
    
        public virtual ObjectResult<string> Usp_getRoleByUserID(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Usp_getRoleByUserID", userIdParameter);
        }
    
        public virtual ObjectResult<Usp_GetRoles_Result> Usp_GetRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetRoles_Result>("Usp_GetRoles");
        }
    
        public virtual ObjectResult<Usp_GetYearwisepaymentdetails_Result> Usp_GetYearwisepaymentdetails(Nullable<long> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetYearwisepaymentdetails_Result>("Usp_GetYearwisepaymentdetails", yearParameter);
        }
    
        public virtual ObjectResult<USP_listofMemberName_Result> USP_listofMemberName(string memberFName)
        {
            var memberFNameParameter = memberFName != null ?
                new ObjectParameter("MemberFName", memberFName) :
                new ObjectParameter("MemberFName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_listofMemberName_Result>("USP_listofMemberName", memberFNameParameter);
        }
    
        public virtual ObjectResult<USP_listofMemberno_Result> USP_listofMemberno(string memberID)
        {
            var memberIDParameter = memberID != null ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_listofMemberno_Result>("USP_listofMemberno", memberIDParameter);
        }
    
        public virtual ObjectResult<Usp_PaymentDetailinfo_Result> Usp_PaymentDetailinfo(Nullable<long> memberID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_PaymentDetailinfo_Result>("Usp_PaymentDetailinfo", memberIDParameter);
        }
    
        public virtual ObjectResult<Usp_PaymentDetailinfo_Name_Result> Usp_PaymentDetailinfo_Name(string memberFName)
        {
            var memberFNameParameter = memberFName != null ?
                new ObjectParameter("MemberFName", memberFName) :
                new ObjectParameter("MemberFName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_PaymentDetailinfo_Name_Result>("Usp_PaymentDetailinfo_Name", memberFNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Usp_UserIDbyUserName(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Usp_UserIDbyUserName", userNameParameter);
        }
    
        public virtual ObjectResult<string> Usp_UserNamebyUserID(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Usp_UserNamebyUserID", userIdParameter);
        }
    }
}
